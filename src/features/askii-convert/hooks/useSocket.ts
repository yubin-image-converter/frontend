import { useEffect } from "react";
import { io } from "socket.io-client";
import { toast } from "sonner";

import { fetchConvertResult } from "../services/fetchResult";

export function useSocket({
  userId,
  onAsciiComplete,
  onProgressUpdate,
  setTxtUrl,
  setStatus,
}: {
  userId?: string;
  onAsciiComplete?: (msg: any) => void;
  onProgressUpdate?: (progress: number) => void; // üî• Ï∂îÍ∞Ä!
  setTxtUrl: (url: string) => void;
  setStatus: (status: "idle" | "converting" | "success" | "error") => void;
}) {
  useEffect(() => {
    if (!userId) return;

    const socket = io(import.meta.env.VITE_SOCKET_SERVER_URL, {
      path: "/socket.io",
      auth: { userId },
    });

    console.log("‚úÖ Socket connected for", userId);

    socket.onAny((event, ...args) => {
      console.log("üì° ÏàòÏã†Îêú ÏÜåÏºì Ïù¥Î≤§Ìä∏:", event, args);
    });

    socket.on("connect_error", (err) => {
      console.error("‚ùå Ïó∞Í≤∞ Ïã§Ìå®:", err.message);
    });

    // ‚úÖ ASCII ÏôÑÎ£å Î©îÏãúÏßÄ ÏàòÏã†
    socket.on("ascii_complete", async (msg) => {
      console.log("‚úÖ ASCII ÏôÑÎ£å Î©îÏãúÏßÄ ÏàòÏã†:", msg);

      const requestId = msg.requestId;
      if (!requestId) return;

      try {
        const data = await fetchConvertResult(requestId);
        setTxtUrl(data.txtUrl);
        setStatus("success");
      } catch (err: any) {
        console.error("‚ùå Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®", err);
        setStatus("error");
        toast.error("Í≤∞Í≥º Ï°∞ÌöåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§");
      }

      onAsciiComplete?.(msg);
    });

    // ‚úÖ Progress Î©îÏãúÏßÄ ÏàòÏã†
    socket.on("progress_update", (msg) => {
      console.log("üì• ÏàòÏã†Îêú ÏÜåÏºì Ïù¥Î≤§Ìä∏: progress_update", msg); // ‚úÖ Ï∞çÌûò
      console.log("onProgressUpdate = ", onProgressUpdate); // ‚úÖ Ïó¨Í∏∞ Ï∞çÏñ¥ÏÑú ÏßÑÏßú Ìï®ÏàòÏù∏ÏßÄ ÌôïÏù∏
      onProgressUpdate?.(msg.progress); // Ïó¨Í∏∞ÏÑú Ìï®ÏàòÎ©¥ Ìò∏Ï∂úÎê† Í≤É
    });

    return () => {
      socket.disconnect();
      console.log("‚ùå Socket disconnected");
    };
  }, [userId, setTxtUrl, setStatus, onAsciiComplete, onProgressUpdate]);
}
